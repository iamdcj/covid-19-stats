{"version":3,"sources":["modules/requests.js","modules/date-time.js","modules/ui.js","modules/DOM.js","modules/data.js","modules/rendering.js","modules/events.js","scripts.js"],"names":["endpoint","request","fetch","method","headers","returnDate","date","_Date","Date","isNaN","toLocaleDateString","year","month","day","statisticsui","stats","sort","a","b","confirmed","map","statistic","index","statisticUI","join","country","lastUpdate","deaths","Math","round","container","document","querySelector","totalCases","searchInput","getElementById","statistics","setStatistics","data","renderStatistics","total","reduce","stat","innerText","innerHTML","handleSearch","event","results","filter","toLowerCase","includes","target","value","addEventListener","then","response","json","covid19Stats","group","currentCountry","existingGroup","find","recovered","catch","error","console","message"],"mappings":"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","file":"scripts.004be7aa.js","sourceRoot":"..","sourcesContent":["const endpoint =\n  \"https://covid-19-coronavirus-statistics.p.rapidapi.com/v1/stats\";\n\nexport const request = fetch(endpoint, {\n  method: \"GET\",\n  headers: {\n    \"x-rapidapi-host\": \"covid-19-coronavirus-statistics.p.rapidapi.com\",\n    \"x-rapidapi-key\": \"6355586673mshe6fe75562f6751dp1f288cjsn9deb12384837\"\n  }\n});\n","export const returnDate = date => {\n  const _Date = new Date(date);\n\n  if (isNaN(_Date)) return;\n\n  const settings = { year: \"numeric\", month: \"long\", day: \"numeric\" };\n  return _Date.toLocaleDateString(\"en-us\", settings);\n};\n","import { returnDate } from \"./date-time\";\n\nexport const statisticsui = stats => `\n  <table>\n  <tr>\n    <th>#</th>\n    <th>🌍 Country</th>\n    <th class=\"bg--orange text--center\">✔ Confirmed</th>\n    <th class=\"bg--red text--center\">☠️Deaths</th>\n    <th class=\"text--center\">Mortality Rate</th>\n    <th>📅 Last Updated</th>\n  </tr>\n    ${stats\n      .sort((a, b) => (a.confirmed > b.confirmed ? -1 : 1))\n      .map((statistic, index) => statisticUI(statistic, index))\n      .join(\"\")}\n  </table>\n`;\n\nconst statisticUI = ({ country, lastUpdate, confirmed, deaths }, index) =>\n  ` <tr>\n        <td>${index + 1}</td>\n        <td>${country}</td>\n        <td class=\"bg--orange-light text--center\">${confirmed}</td>\n        <td class=\"bg--red-light text--center text--strong\">${deaths}</td>\n        <td class=\"text--center\">${\n          deaths ? `${Math.round((deaths * 100) / confirmed)}%` : `N/A`\n        }</td>\n        <td>${returnDate(lastUpdate)}</td>\n    </tr>\n  `;\n","export const container = document.querySelector(\".root\");\nexport const totalCases = document.querySelector(\".total\");\nexport const searchInput = document.getElementById(\"query\");\n","export let statistics = [];\n\nexport const setStatistics = data => {\n  statistics = [...data];\n};\n","import { statisticsui } from \"./ui\";\nimport { totalCases, container } from \"./DOM\";\nimport { statistics } from \"./data\";\n\nexport const renderStatistics = stats => {\n  const total = [...statistics].reduce((total, stat) => {\n    return total + stat.confirmed;\n  }, 0);\n\n  totalCases.innerText = total;\n  container.innerHTML = statisticsui(stats);\n};\n","import { searchInput } from \"./DOM\";\nimport { statistics, setStatistics } from \"./data\";\nimport { renderStatistics } from \"./rendering\";\n\nfunction handleSearch(event) {\n  const results = statistics.filter(({ country }) => {\n    return country.toLowerCase().includes(event.target.value.toLowerCase());\n  });\n\n  renderStatistics(results);\n}\n\nsearchInput.addEventListener(\"keyup\", handleSearch, true);\n","import { request } from \"./modules/requests\";\nimport { renderStatistics } from \"./modules/rendering\";\nimport { setStatistics } from \"./modules/data\";\nimport \"./modules/events\";\n\n{\n  request\n    .then(response => response.json())\n    .then(({ data }) => {\n      const statistics = data.covid19Stats\n        .filter(({ confirmed }) => confirmed > 0)\n        .reduce((statistics, group) => {\n          const { country: currentCountry } = group;\n\n          const existingGroup = statistics.find(\n            ({ country }) => country === currentCountry\n          );\n\n          if (existingGroup) {\n            existingGroup.confirmed += group.confirmed;\n            existingGroup.deaths += group.deaths;\n            existingGroup.recovered += group.recovered;\n          }\n\n          return existingGroup ? [...statistics] : [...statistics, group];\n        }, []);\n\n      setStatistics(statistics);\n\n      return statistics;\n    })\n    .then(statistics => renderStatistics(statistics))\n    .catch(error => console.error(error.message));\n}\n"]}