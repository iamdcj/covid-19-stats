{"version":3,"sources":["modules/requests.js","modules/date-time.js","modules/templates.js","modules/DOM.js","scripts.js"],"names":["endpoint","request","fetch","method","headers","returnDate","date","_Date","Date","isNaN","settings","year","month","day","toLocaleDateString","statisticsui","stats","sort","a","b","confirmed","map","statistic","statisticUI","join","country","lastUpdate","deaths","Math","floor","container","document","querySelector","renderStatistics","statistics","innerHTML","then","response","json","data","covid19Stats","filter","reduce","group","currentCountry","existingGroup","find","recovered","statitistics","catch","error","console","message"],"mappings":";;AIAA;;AACA;;AJDA,IAAMA,QAAQ,GACZ,iEADF;AGAA,AFAO,ADGA,AEHP,IDAaK,ADGAJ,OAAO,GCHG,ADGAC,GCHG,EDGE,CAACF,MCHhBK,EDGe,EAAW,MCHb,CAAAC,IAAI,EAAI;AAChC,ADGAH,EAAAA,ICHMI,EDGA,EAAE,CCHG,GAAG,CDEuB,GCFnBC,IAAJ,CAASF,IAAT,CAAd;AECF,AHGEF,AEHK,EFGLA,EGHI0B,ADAOf,KFGJ,EAAE,EGHI,GAAGgB,ADAO,GAAG,KCAF,CAACC,GDAdjB,UCAK,CAAuB,CDAb,CAAAC,GCAV,CAAlB,CDAiC;ADC/B,ADGE,AEJ6B,MDC3BP,KAAK,CAACF,KAAD,CAAT,EAAkB,GDGG,gDADZ,sJEMLS,KAAK,CACJC,IADD,CACM,UAACC,CAAD,EAAIC,CAAJ;ACRL,AFCL,ADEE,AEKQ,ICRCc,EFCLvB,KCOeQ,CAAC,CAACE,CDPT,GAAG,GEDU,EHGP,AEKC,CCRS,EDQKD,CAAC,CAACC,KCR1Ba,IDQU,GAA4B,CAAC,CAA7B,GAAiC,CAA5C,GCRoB,CAAAC,UAAU,EAAI;AAC5CJ,AFAmBnB,ADAV,AEOC,ECPVmB,CDMI,CDNenB,CCQdU,GDRkB,ACMnB,CAEK,CDRgB,CEAhB,CAACc,OFAO,ACQRb,ECRT,GAAsB,IDQJ,yBCRiBY,UAAb,CAAtB;AACD,AFDqCtB,ADFC,AEUnB,CCTb,AHDqB,CAArB,ECE+BA,KAAK,EAAE,ACQrBW,MDRL,KCQgB,CAACD,SAAD,CAAf;ADRiCT,ACQjC,AEVpB,GFQM,CDN+CA,CCS9CW,EDTiD,EAAE,ACMpD,CAGM,EAHN,CAT2B;ADGd,ACHc,AEE/BvB,CFFK,EDGL,iBGAGmC,IADH,CACQ,UAAAC,QAAQ;AHChB,AGDgB,SHCT9B,EGDa8B,GHCR,CAACvB,IGDe,CAACwB,IAAT,EAAJ,OHCT,CAAyB,OAAzB,EAAkC5B,QAAlC,CAAP;AACD,AGFiB,CHLX,EGIL,EAEG0B,IAFH,CAEQ;AAAA,QAAGG,IAAH,QAAGA,IAAH;AFYV,AEZU,IFYJhB,OEXAgB,IFWW,AEXP,CAACC,EFWS,SAAdjB,CEXA,CACGkB,MADH,CACU,EFUI;AAAA,AEVJ,MFUOhB,IEVJL,GFUC,MEVJ,EFUOK,OAAH,AEVDL,SAAH;AFUI,AEVJ,MFUgBM,OEVGN,GFUf,MEVwB,EFUZM,CEVe,CAA/B,QFUI;AAAA,AEVJ,KADV,CFWsCN,CETnCsB,MAFH,CAEU,CFSI,QAAwBtB,CET3Bc,QFSG,EETJ,EAAaS,KAAb,EAAuB;AFSnB,AETmB,MFSgBhB,IER5BiB,EFQP,QAAmCjB,IEThB,EFSnB,CER0BgB,KADP,CACrBlB,OADqB;AFSnB,AENV,UAAMoB,aAAa,GAAGX,UAAU,CAACY,IAAX,CACpB,CFQErB,OAHM,gCAINL,SAJM,gCAKNO,MALM,gCAMNC,IAAI,CAACC,KAAL,CAAYF,MAAM,GAAG,GAAV,GAAiBP,SAA5B,CANM,gCAON,0BAAWM,UAAX,CAPM;AAAA,AELR,CFKZ,WELeD,OAAH,SAAGA,OAAH;AAAA,eAAiBA,OAAO,KAAKmB,cAA7B;AAAA,OADoB,CAAtB;;AAIA,UAAIC,aAAJ,EAAmB;AACjBA,QAAAA,aAAa,CAACzB,SAAd,IAA2BuB,KAAK,CAACvB,SAAjC;AACAyB,QAAAA,aAAa,CAAClB,MAAd,IAAwBgB,KAAK,CAAChB,MAA9B;AACAkB,QAAAA,aAAa,CAACE,SAAd,IAA2BJ,KAAK,CAACI,SAAjC;AACD;;AAED,aAAOF,aAAa,sBAAOX,UAAP,iCAAyBA,UAAzB,IAAqCS,KAArC,EAApB;AACD,KAhBH,EAgBK,EAhBL,CADI;AAAA,GAFR,EAqBGP,IArBH,CAqBQ,UAAAY,YAAY;AAAA,WAAI,2BAAiBA,YAAjB,CAAJ;AAAA,GArBpB,EAsBGC,KAtBH,CAsBS,UAAAC,KAAK;AAAA,WAAIC,OAAO,CAACD,KAAR,CAAcA,KAAK,CAACE,OAApB,CAAJ;AAAA,GAtBd;AAuBD","file":"scripts.b71a6038.js","sourceRoot":"..","sourcesContent":["const endpoint =\n  \"https://covid-19-coronavirus-statistics.p.rapidapi.com/v1/stats\";\n\nexport const request = fetch(endpoint, {\n  method: \"GET\",\n  headers: {\n    \"x-rapidapi-host\": \"covid-19-coronavirus-statistics.p.rapidapi.com\",\n    \"x-rapidapi-key\": \"6355586673mshe6fe75562f6751dp1f288cjsn9deb12384837\"\n  }\n});\n","export const returnDate = date => {\n  const _Date = new Date(date);\n\n  if (isNaN(_Date)) return;\n\n  const settings = { year: \"numeric\", month: \"long\", day: \"numeric\" };\n  return _Date.toLocaleDateString(\"en-us\", settings);\n};\n","import { returnDate } from \"./date-time\";\n\nexport const statisticsui = stats => `\n  <table>\n  <tr>\n    <th>🌍 Country</th>\n    <th>✔ Confirmed</th>\n    <th>☠️Deaths</th>\n    <th>Mortality Rate</th>\n    <th>📅 Last Updated</th>\n  </tr>\n    ${stats\n      .sort((a, b) => (a.confirmed > b.confirmed ? -1 : 1))\n      .map(statistic => statisticUI(statistic))\n      .join(\"\")}\n  </table>\n`;\n\nconst statisticUI = ({ country, lastUpdate, confirmed, deaths }) =>\n  `\n    <tr>\n        <td>${country}</td>\n        <td>${confirmed}</td>\n        <td>${deaths}</td>\n        <td>${Math.floor((deaths * 100) / confirmed)}</td>\n        <td>${returnDate(lastUpdate)}</td>\n    </tr>\n  `;\n","import { statisticsui } from \"./templates\";\n\nconst container = document.querySelector(\"div\");\n\nexport const renderStatistics = statistics => {\n  container.innerHTML = statisticsui(statistics);\n};\n","import { request } from \"./modules/requests\";\nimport { renderStatistics } from \"./modules/DOM\";\n\n{\n  request\n    .then(response => response.json())\n    .then(({ data }) =>\n      data.covid19Stats\n        .filter(({ confirmed }) => confirmed > 0)\n        .reduce((statistics, group) => {\n          const { country: currentCountry } = group;\n\n          const existingGroup = statistics.find(\n            ({ country }) => country === currentCountry\n          );\n\n          if (existingGroup) {\n            existingGroup.confirmed += group.confirmed;\n            existingGroup.deaths += group.deaths;\n            existingGroup.recovered += group.recovered;\n          }\n\n          return existingGroup ? [...statistics] : [...statistics, group];\n        }, [])\n    )\n    .then(statitistics => renderStatistics(statitistics))\n    .catch(error => console.error(error.message));\n}\n"]}