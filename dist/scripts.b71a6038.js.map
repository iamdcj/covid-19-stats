{"version":3,"sources":["modules/requests.js","modules/date-time.js","modules/templates.js","modules/DOM.js","scripts.js"],"names":["endpoint","request","fetch","method","headers","returnDate","date","_Date","Date","isNaN","settings","year","month","day","toLocaleDateString","statisticsui","stats","filter","country","map","statistic","statisticUI","sort","join","lastUpdate","confirmed","deaths","substring","toLowerCase","container","document","querySelector","renderStatistics","statistics","innerHTML","then","response","json","data","covid19Stats","catch","error","console","message"],"mappings":";;AIAA;;AACA;;AJDA,AIGA,IJHMA,QAAQ,GACZ,iEADF;AGAA,AFAO,ADGA,AEHP,AEIEC,IHJWI,ADGAJ,OAAO,GCHG,ADGAC,GCHG,EDGE,CAACF,AIExBmC,IADH,CACQ,CHLG9B,EDGe,EAAW,KIE7B+B,CHLgB,CAAA9B,IAAI,EAAI,AGKhB;AHJhB,ADGAH,AICgB,EJDhBA,ICHMI,EDGA,EAAE,CCHG,AGIS6B,GHJN,CDEuB,GCFnB5B,CGIU,CAAC6B,EHJf,CAAS/B,CGIH,EAAJ,CHJF,CAAd;AECF,AHGEF,AEHK,AEGW,EJAhBA,CIDA,CDFIyB,ADAOd,CEIRoB,IJDI,AIDP,CAEQ,CJDC,EGHI,GAAGL,ADAO,GAAG,KCAF,CAACC,GDAdhB,UCAK,CAAuB,CDAb,CAAAC,GCAV,CAAlB,CDAiC;ADC/B,ADGE,AEJ6B,AEIvB,MHHJP,EGGO6B,GHHF,CAAC/B,AGGF,KHHC,CAAT,EAAkB,AGGP+B,GJAU,CIAb,wBFFJtB,KAAK,CACJC,MADD,CACQ,UFAH;AGDJ,AFCL,ADEE,AEFU,AECJ,IDFGe,EFCLtB,ECASQ,GECO,GHDR,CCAF,EDAK,GEDU,EHGP,CGHU,ADCfA,OAAH,ECDDc,MCE4BM,IAAI,CAACC,KDFd,CAAAN,MCER,CAAd,GDFgC,EAAI;AAC5CJ,AFAmBlB,ADAV,AEAG,AECJ,EDDRkB,CCDA,CHCmBlB,CGEhB6B,GHFoB,EAAE,AGDzB,CDCS,ADAoBtB,AEEpB,CDFCgB,MDA0B,CDAnB,EEAjB,ACESO,EFFgC,CCAnB,ECER,IFFF,uBCAuBR,UAAb,CAAtB;AACD,AFDqCrB,ADFC,AEEzB,AEEE,CDHT,AHDqB,CAArB,CECD,CDCgCA,CCC/BO,GAFD,CDCqC,ACChC,EDDkC,AGEzBuB,MHFD,CGEQ,CFDhBtB,AECiBqB,KAAR,CAAcA,GFDd,EECmB,CAACE,OAApB,CAAJ;AHFqC9B,ACCjC,AECJ,GAHd,CHCmDA,GAAG,EAAE,ECClCQ,WAAW,CAACD,SAAD,CAAf;ADDD,ACCC,AEEnB,GHHC,ACDI,EAGCE,IAHD,GAICC,IAJD,CAIM,EAJN,CAF2B;ADI/B,ACJ+B,CAA1B,QDIEhB,KAAK,CAACO,kBAAN,CAAyB,OAAzB,EAAkCJ,QAAlC,CAAP;AACD,CAPM;;;ACYP,IAAMW,WAAW,GAAG,SAAdA,WAAc;AAAA,MAAGH,OAAH,SAAGA,OAAH;AAAA,MAAYM,UAAZ,SAAYA,UAAZ;AAAA,MAAwBC,SAAxB,SAAwBA,SAAxB;AAAA,MAAmCC,MAAnC,SAAmCA,MAAnC;AAAA,oIAI0CR,OAAO,CAC1DS,SADmD,CACzC,CADyC,EACtC,CADsC,EAEnDC,WAFmD,EAJ1C,uBAMgBV,OANhB,qCAONO,SAPM,0DAQLC,MARK,oBAQW,0BAAWF,UAAX,CARX;AAAA,CAApB","file":"scripts.b71a6038.js","sourceRoot":"..","sourcesContent":["const endpoint =\n  \"https://covid-19-coronavirus-statistics.p.rapidapi.com/v1/stats\";\n\nexport const request = fetch(endpoint, {\n  method: \"GET\",\n  headers: {\n    \"x-rapidapi-host\": \"covid-19-coronavirus-statistics.p.rapidapi.com\",\n    \"x-rapidapi-key\": \"6355586673mshe6fe75562f6751dp1f288cjsn9deb12384837\"\n  }\n});\n","export const returnDate = date => {\n  const _Date = new Date(date);\n\n  if (isNaN(_Date)) return;\n\n  const settings = { year: \"numeric\", month: \"long\", day: \"numeric\" };\n  return _Date.toLocaleDateString(\"en-us\", settings);\n};\n","import { returnDate } from \"./date-time\";\n\nexport const statisticsui = stats => `\n  <ul class=\"grid\">\n    ${stats\n      .filter(({ country }) => country !== \"China\")\n      .map(statistic => statisticUI(statistic))\n      .sort()\n      .join(\"\")}\n  </ul>\n`;\n\nconst statisticUI = ({ country, lastUpdate, confirmed, deaths }) =>\n  `\n    <li>\n      <div class=\"stat  grid__item\">\n        <h2><span class=\"icon  flag-icon-squared  flag-icon-${country\n          .substring(0, 2)\n          .toLowerCase()}\"></span>${country}</h2>\n        <p>✅${confirmed} confirmed cases</p>\n        <p>☠️${deaths} as of ${returnDate(lastUpdate)}</p>\n      </div>\n    </li>\n  `;\n","import { statisticsui } from \"./templates\";\n\nconst container = document.querySelector(\"div\");\n\nexport const renderStatistics = statistics => {\n  container.innerHTML = statisticsui(statistics);\n};\n","import { request } from \"./modules/requests\";\nimport { renderStatistics } from \"./modules/DOM\";\n\n{\n  request\n    .then(response => response.json())\n    .then(({ data }) => renderStatistics(data.covid19Stats))\n    .catch(error => console.error(error.message));\n}\n"]}