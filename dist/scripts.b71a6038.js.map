{"version":3,"sources":["modules/requests.js","modules/date-time.js","modules/templates.js","modules/DOM.js","scripts.js"],"names":["endpoint","request","fetch","method","headers","returnDate","date","_Date","Date","isNaN","settings","year","month","day","toLocaleDateString","statisticsui","stats","sort","a","b","confirmed","map","statistic","index","statisticUI","join","country","lastUpdate","deaths","Math","round","container","document","querySelector","totalCases","renderStatistics","statistics","total","reduce","stat","innerText","innerHTML","then","response","json","data","covid19Stats","filter","group","currentCountry","existingGroup","find","recovered","statitistics","catch","error","console","message"],"mappings":";;AIAA;;AACA;;AJDA,IAAMA,QAAQ,GACZ,iEADF;AGAA,AFAO,ADGA,AEHP,IDAaK,ADGAJ,OAAO,GCHG,ADGAC,GCHG,EDGE,CAACF,MCHhBK,EDGe,EAAW,MCHb,CAAAC,IAAI,EAAI;AAChC,ADGAH,EAAAA,ICHMI,EDGA,EAAE,CCHG,GAAG,CDEuB,GCFnBC,IAAJ,CAASF,IAAT,CAAd;AECF,AHGEF,AEHK,EFGLA,EGHI2B,ADAOhB,KFGJ,EAAE,EGHI,GAAGiB,ADAO,GAAG,KCAF,CAACC,GDAdlB,UCAK,CAAuB,CDAb,CAAAC,GCAV,CAAlB,CDAiC;ACCjC,AFAE,ADGE,AEJ6B,ICC3BkB,EFAAzB,KAAK,CAACF,EEAI,GAAGyB,AFAR,CAAT,EAAkB,GDGG,EGHI,CAACC,aAAT,CAAuB,QAAvB,CAAnB,sBHEW,8PEOLjB,KAAK,CACJC,IADD,CACM,UAACC,CAAD,EAAIC,CAAJ;ADRV,ADEE,AEMQ,MDRJT,KCQeQ,CAAC,CAACE,CDRT,GAAG,KDEG,AEMC,GAAcD,CAAC,CAACC,SAAhB,GAA4B,CAAC,CAA7B,GAAiC,CAA5C;ACRL,AFAcT,ADAV,AEQC,GADN,CCPOwB,AFAQxB,CCSdU,GDTkB,ACOnB,CAEK,CDTgB,SAAR,ACSPC,CCTiB,GAAG,KDSrB,EAAYC,ECTVY,GDSF,aCTqB,CAAAC,UAAU,EAAI;AAC5C,AFDoCxB,ADFC,AEW5B,CFXiB,CAArB,ECE+BA,EEC9ByB,GFDmC,EEC9B,AFDgC,ACSZb,GCRjBY,GFDG,KCSyB,CAACd,CCRnB,CAACgB,MAAX,CAAkB,ADQU,EAAYf,KAAZ,CAAjC,ECRwBc,KAAD,EAAQE,IAAR,EAAiB;AAC/C,AFFiD1B,ACS1C,AEXX,GFSM,CDP+CA,CCU9CY,EDViD,EAAE,ACOpD,CAGM,CCRDY,CDKL,CAV2B,GCKjB,GAAGE,IAAI,CAACnB,SAApB;AACD,AFHgB,ACHc,AEE/BnB,CFFK,ECIS,AFDd,EEGG,CAFW,CAAd,aCDGyC,IADH,CACQ,UAAAC,QAAQ;ADKhBT,AFJA,AGDgB,EDKhBA,OFJO3B,EGDaoC,CDKV,CAACH,CFJC,CAAC1B,IGDe,CAAC8B,EDK7B,ECLoB,CDKGP,CCLP,IDKhB,GFJO,CAAyB,OAAzB,EAAkC3B,QAAlC,CAAP;AEMAqB,AFLD,AGFiB,CHLX,CEYLA,CCRA,EAEGW,IAFH,CAEQ,CDMC,CAACD,SAAV,GAAsB,6BAAaL,UAAb,CAAtB;AACD,ACPS,CDDH,OCCMS,IAAH,QAAGA,IAAH;AFaV,AEbU,IFaJrB,OEZAqB,IFYW,AEZP,CAACC,EFYS,SAAdtB,CEZA,CACGuB,MADH,CACU,EFWI,OAA6CxB,KAA7C;AAAA,AEXJ,MFWOG,IEXJN,GFWC,MEXJ,EFWOM,OAAH,AEXDN,SAAH;AFWI,AEXJ,MFWgBO,OEXGP,GFWf,MEXwB,EFWZO,CEXe,CAA/B,QFWI;AAAA,AEXJ,KADV,CFYsCP,CEVnCkB,MAFH,CAEU,CFUI,QAAwBlB,CEV3BgB,QFUG,EEVJ,EAAaY,KAAb,EAAuB;AFUnB,AEVmB,MFUgBpB,IET5BqB,EFSP,QAAmCrB,IEVhB,EFUnB,CET0BoB,KADP,CACrBtB,OADqB;AFUnB,AEPV,UAAMwB,aAAa,GAAGd,UAAU,CAACe,CFS7B5B,GETkB,CACpB,CFQO,GAAG,CAFF,gCAGNG,OAHM,wEAIgCN,SAJhC,kFAK0CQ,MAL1C,uDAOVA,MAAM,aAAMC,IAAI,CAACC,KAAL,CAAYF,MAAM,GAAG,GAAV,GAAiBR,SAA5B,CAAN,cAPI,gCASN,0BAAWO,UAAX,CATM;AAAA,AENR,CFMZ,WENeD,OAAH,SAAGA,OAAH;AAAA,eAAiBA,OAAO,KAAKuB,cAA7B;AAAA,OADoB,CAAtB;;AAIA,UAAIC,aAAJ,EAAmB;AACjBA,QAAAA,aAAa,CAAC9B,SAAd,IAA2B4B,KAAK,CAAC5B,SAAjC;AACA8B,QAAAA,aAAa,CAACtB,MAAd,IAAwBoB,KAAK,CAACpB,MAA9B;AACAsB,QAAAA,aAAa,CAACE,SAAd,IAA2BJ,KAAK,CAACI,SAAjC;AACD;;AAED,aAAOF,aAAa,sBAAOd,UAAP,iCAAyBA,UAAzB,IAAqCY,KAArC,EAApB;AACD,KAhBH,EAgBK,EAhBL,CADI;AAAA,GAFR,EAqBGN,IArBH,CAqBQ,UAAAW,YAAY;AAAA,WAAI,2BAAiBA,YAAjB,CAAJ;AAAA,GArBpB,EAsBGC,KAtBH,CAsBS,UAAAC,KAAK;AAAA,WAAIC,OAAO,CAACD,KAAR,CAAcA,KAAK,CAACE,OAApB,CAAJ;AAAA,GAtBd;AAuBD","file":"scripts.b71a6038.js","sourceRoot":"..","sourcesContent":["const endpoint =\n  \"https://covid-19-coronavirus-statistics.p.rapidapi.com/v1/stats\";\n\nexport const request = fetch(endpoint, {\n  method: \"GET\",\n  headers: {\n    \"x-rapidapi-host\": \"covid-19-coronavirus-statistics.p.rapidapi.com\",\n    \"x-rapidapi-key\": \"6355586673mshe6fe75562f6751dp1f288cjsn9deb12384837\"\n  }\n});\n","export const returnDate = date => {\n  const _Date = new Date(date);\n\n  if (isNaN(_Date)) return;\n\n  const settings = { year: \"numeric\", month: \"long\", day: \"numeric\" };\n  return _Date.toLocaleDateString(\"en-us\", settings);\n};\n","import { returnDate } from \"./date-time\";\n\nexport const statisticsui = stats => `\n  <table>\n  <tr>\n    <th>#</th>\n    <th>🌍 Country</th>\n    <th class=\"bg--yellow text--center\">✔ Confirmed</th>\n    <th class=\"bg--red text--center\">☠️Deaths</th>\n    <th class=\"text--center\">Mortality Rate</th>\n    <th>📅 Last Updated</th>\n  </tr>\n    ${stats\n      .sort((a, b) => (a.confirmed > b.confirmed ? -1 : 1))\n      .map((statistic, index) => statisticUI(statistic, index))\n      .join(\"\")}\n  </table>\n`;\n\nconst statisticUI = ({ country, lastUpdate, confirmed, deaths }, index) =>\n  ` <tr>\n        <td>${index + 1}</td>\n        <td>${country}</td>\n        <td class=\"bg--yellow-light text--center\">${confirmed}</td>\n        <td class=\"bg--red-light text--center text--strong\">${deaths}</td>\n        <td class=\"text--center\">${\n          deaths ? `${Math.round((deaths * 100) / confirmed)}%` : `N/A`\n        }</td>\n        <td>${returnDate(lastUpdate)}</td>\n    </tr>\n  `;\n","import { statisticsui } from \"./templates\";\n\nconst container = document.querySelector(\"div\");\nconst totalCases = document.querySelector(\".total\");\n\nexport const renderStatistics = statistics => {\n  const total = statistics.reduce((total, stat) => {\n    return total + stat.confirmed;\n  }, 0);\n\n  totalCases.innerText = total;\n\n  container.innerHTML = statisticsui(statistics);\n};\n","import { request } from \"./modules/requests\";\nimport { renderStatistics } from \"./modules/DOM\";\n\n{\n  request\n    .then(response => response.json())\n    .then(({ data }) =>\n      data.covid19Stats\n        .filter(({ confirmed }) => confirmed > 0)\n        .reduce((statistics, group) => {\n          const { country: currentCountry } = group;\n\n          const existingGroup = statistics.find(\n            ({ country }) => country === currentCountry\n          );\n\n          if (existingGroup) {\n            existingGroup.confirmed += group.confirmed;\n            existingGroup.deaths += group.deaths;\n            existingGroup.recovered += group.recovered;\n          }\n\n          return existingGroup ? [...statistics] : [...statistics, group];\n        }, [])\n    )\n    .then(statitistics => renderStatistics(statitistics))\n    .catch(error => console.error(error.message));\n}\n"]}