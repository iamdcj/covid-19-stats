{"version":3,"sources":["modules/date-time.js","modules/DOM.js","modules/ui.js","modules/data.js","modules/rendering.js","modules/searching.js","modules/sorting.js","modules/events.js","scripts.js"],"names":["returnDate","date","_Date","Date","isNaN","toLocaleDateString","main","document","querySelector","responsive","totalCases","totalDeaths","searchInput","getElementById","sortControls","querySelectorAll","numberFormatter","Intl","NumberFormat","maximumSignificantDigits","statisticsUI","stats","innerHTML","map","index","country","statisticsMain","join","statistic","statisticsResponsive","handleRate","deaths","rate","lastUpdate","confirmed","formattedDeaths","format","formattedConfirmed","statistics","renderedStatistics","setStatistics","data","setRenderedStatistics","renderStatistics","deathCount","reduce","total","caseCount","innerText","length","container","handleSearch","event","results","filter","toLowerCase","includes","target","value","sortIcons","asc","desc","setSortAction","_El","order","sortIndicator","setAttribute","handleSorting","sortType","dataset","sort","sortOrder","forEach","control","sorted","a","b","addEventListener","returnMortalityRate","Math","round","fetch","then","response","json","features","Error","attributes","Last_Update","Confirmed","recovered","Recovered","Deaths","active","Active","Country_Region","group","currentCountry","existingGroup","find","catch","error","console","message"],"mappings":"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","file":"scripts.490fdc0c.js","sourceRoot":"..","sourcesContent":["export const returnDate = date => {\n  const _Date = new Date(date);\n\n  if (isNaN(_Date)) return;\n\n  return _Date.toLocaleDateString(\"en-us\");\n};\n","export const main = document.querySelector(\".root-main\");\nexport const responsive = document.querySelector(\".root-responsive\");\nexport const totalCases = document.querySelector(\".total-cases\");\nexport const totalDeaths = document.querySelector(\".total-deaths\");\nexport const searchInput = document.getElementById(\"query\");\nexport const sortControls = document.querySelectorAll(\".btn--sort\");\n","import { returnDate } from './date-time';\nimport { main, responsive } from './DOM';\n\nexport const numberFormatter = Intl.NumberFormat('en-Us', {\n  maximumSignificantDigits: 3,\n});\n\nexport const statisticsUI = (stats) => {\n  main.innerHTML = stats\n    .map(({ country }, index) => statisticsMain(country, index))\n    .join('');\n  responsive.innerHTML = stats\n    .map((statistic, index) => statisticsResponsive(statistic, index))\n    .join('');\n};\n\nconst handleRate = (deaths, rate) => {\n  if (!deaths) {\n    return `N/A`;\n  }\n\n  return rate < 1 ? `< 1%` : `${rate}%`;\n};\n\nconst statisticsMain = (country) =>\n  ` <tr>\n      <td>${country === 'US' ? 'USA' : country}</td>\n    </tr>\n  `;\n\nconst statisticsResponsive = ({ lastUpdate, confirmed, deaths, rate }) => {\n  const formattedDeaths = numberFormatter.format(deaths);\n  const formattedConfirmed = numberFormatter.format(confirmed);\n\n  return ` <tr>\n        <td  colspan=\"2\" class=\"color--orange text--center text--strong\">${formattedConfirmed}</td>\n        <td  colspan=\"2\" class=\"color--red text--center text--strong\">${formattedDeaths}</td>\n        <td class=\"text--center\">\n            ${handleRate(deaths, rate)}\n        </td>\n        <td class=\"text--right text--small\">${returnDate(lastUpdate)}</td>\n      </tr>\n    `;\n};\n","export let statistics = [];\nexport let renderedStatistics = [];\n\nexport const setStatistics = data => {\n  statistics = [...data];\n};\n\nexport const setRenderedStatistics = data => {\n  renderedStatistics = [...data];\n};\n","import { numberFormatter, statisticsUI } from './ui';\nimport { totalCases, totalDeaths } from './DOM';\nimport { statistics, setRenderedStatistics } from './data';\n\nexport const renderStatistics = (stats) => {\n  const deathCount = [...statistics].reduce((total, { deaths = 0 }) => {\n    return total + deaths;\n  }, 0);\n\n  const caseCount = [...statistics].reduce((total, { confirmed = 0 }) => {\n    return total + confirmed;\n  }, 0);\n\n  totalDeaths.innerText = numberFormatter.format(deathCount);\n  totalCases.innerText = numberFormatter.format(caseCount);\n\n  if (stats.length < 1) {\n    container.innerHTML = `<tr><td colspan=\"5\"><p>Sorry, no results for that search. Please adjust your query.<p></td></tr>`;\n  } else {\n    setRenderedStatistics(stats);\n    statisticsUI(stats);\n  }\n};\n","import { searchInput, sortControls } from \"./DOM\";\nimport { statistics } from \"./data\";\nimport { renderStatistics } from \"./rendering\";\n\nfunction handleSearch(event) {\n  const results = statistics.filter(({ country }) => {\n    return country.toLowerCase().includes(event.target.value.toLowerCase());\n  });\n\n  renderStatistics(results);\n}\n\nexport { handleSearch };\n","import { sortControls } from \"./DOM\";\nimport { renderedStatistics } from \"./data\";\nimport { renderStatistics } from \"./rendering\";\n\nconst sortIcons = {\n  asc: \"↑\",\n  desc: \"↓\"\n};\n\nconst setSortAction = (_El, order) => {\n  const sortIndicator = _El.querySelector(\"span\");\n  _El.setAttribute(\"data-sort-order\", order);\n  sortIndicator.innerText = sortIcons[order] || \"↕\";\n};\n\nfunction handleSorting() {\n  const _El = this;\n\n  if (!_El) {\n    return;\n  }\n\n  const sortType = _El.dataset.sort;\n  const sortOrder = _El.dataset.sortOrder;\n\n  sortControls.forEach(control => {\n    setSortAction(control, \"\");\n  });\n\n  const sorted = renderedStatistics.sort((a, b) => {\n    if (!sortOrder || sortOrder === \"asc\") {\n      setSortAction(_El, \"desc\");\n\n      if (sortType === \"country\") {\n        return b[sortType] < a[sortType] ? -1 : 1;\n      } else {\n        return b[sortType] - a[sortType];\n      }\n    } else {\n      setSortAction(_El, \"asc\");\n      if (sortType === \"country\") {\n        return a[sortType] > b[sortType] ? 1 : -1;\n      } else {\n        return a[sortType] - b[sortType];\n      }\n    }\n  });\n\n  renderStatistics(sorted);\n}\n\nexport { handleSorting };\n","import { searchInput, sortControls } from \"./DOM\";\nimport { handleSearch } from \"./searching\";\nimport { handleSorting } from \"./sorting\";\n\nsearchInput.addEventListener(\"keyup\", handleSearch, true);\n\nsortControls.forEach(control => {\n  control.addEventListener(\"click\", handleSorting, false);\n});\n","import { renderStatistics } from \"./modules/rendering\";\nimport { setStatistics } from \"./modules/data\";\nimport \"./modules/events\";\n\n{\n  const returnMortalityRate = (deaths, confirmed) => Math.round((deaths * 100) / confirmed);\n\n  fetch(process.env.DATA_URL)\n    .then((response) => response.json())\n    .then(({ features }) => {\n      if (!features) {\n        throw Error(\"No data\");\n      }\n\n      const statistics = features\n        .map(\n          ({\n            attributes: {\n              Last_Update: lastUpdate,\n              Confirmed: confirmed,\n              Recovered: recovered,\n              Deaths: deaths,\n              Active: active,\n              Country_Region: country,\n            },\n          }) => {\n            \n            return {\n              lastUpdate,\n              confirmed,\n              recovered,\n              deaths,\n              active,\n              country,\n            };\n          }\n        )\n        .filter(({ confirmed }) => confirmed)\n        .reduce((statistics, group) => {\n          const { country: currentCountry } = group;\n\n          const existingGroup = statistics.find(\n            ({ country }) => country === currentCountry\n          );\n\n          if (existingGroup) {\n            existingGroup.confirmed += group.confirmed;\n            existingGroup.deaths += group.deaths;\n            existingGroup.recovered += group.recovered;\n          }\n\n\n\n          return existingGroup ? [...statistics] : [...statistics, group];\n        }, [])\n        .map(data => {\n         const rate = returnMortalityRate(data.deaths, data.confirmed);\n          \n          return {\n            ...data,\n            rate\n          }\n        })\n        .sort((a, b) => b.confirmed - a.confirmed);\n\n      setStatistics(statistics);\n\n      return statistics;\n    })\n    .then((statistics) => renderStatistics(statistics))\n    .catch((error) => console.error(error.message));\n}\n"]}