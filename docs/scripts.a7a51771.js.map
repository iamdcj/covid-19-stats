{"version":3,"sources":["modules/requests.js","modules/date-time.js","modules/ui.js","modules/DOM.js","modules/data.js","modules/rendering.js","modules/events.js","scripts.js"],"names":["endpoint","request","fetch","returnDate","date","_Date","Date","isNaN","toLocaleDateString","returnMortalityRate","deaths","confirmed","percentage","Math","round","statisticsui","stats","sort","a","b","map","statistic","index","statisticUI","join","country","lastUpdate","container","document","querySelector","totalCases","totalDeaths","searchInput","getElementById","_Loader","statistics","setStatistics","data","renderStatistics","innerText","reduce","total","stat","length","innerHTML","handleSearch","event","results","filter","toLowerCase","includes","target","value","addEventListener","then","response","json","features","attributes","Last_Update","Confirmed","recovered","Recovered","Deaths","active","Active","Country_Region","group","currentCountry","existingGroup","find","catch","error","console","message","finally","classList","remove"],"mappings":"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","file":"scripts.a7a51771.js","sourceRoot":"..","sourcesContent":["const endpoint =\n  \"https://services1.arcgis.com/0MSEUqKaxRlEPj5g/arcgis/rest/services/ncov_cases/FeatureServer/1/query?f=json&where=(Confirmed%20%3E%200)&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=Confirmed%20desc%2CCountry_Region%20asc%2CProvince_State%20asc&outSR=102100\";\n\nexport const request = fetch(endpoint);\n","export const returnDate = date => {\n  const _Date = new Date(date);\n\n  if (isNaN(_Date)) return;\n\n  return _Date.toLocaleDateString(\"en-us\");\n};\n","import { returnDate } from \"./date-time\";\n\nconst returnMortalityRate = (deaths, confirmed) => {\n  const percentage = Math.round((deaths * 100) / confirmed);\n\n  return percentage < 1 ? \"&lt; 1%\" : `${percentage}%`;\n};\n\nexport const statisticsui = stats =>\n  stats\n    .sort((a, b) => (a.confirmed > b.confirmed ? -1 : 1))\n    .map((statistic, index) => statisticUI(statistic, index))\n    .join(\"\");\n\nconst statisticUI = ({ country, lastUpdate, confirmed, deaths }, index) =>\n  ` <tr>\n        <td>${country}</td>\n        <td class=\"text--center\">${confirmed}</td>\n        <td class=\"text--center text--strong\">${deaths}</td>\n        <td class=\"text--center\">\n          ${deaths ? returnMortalityRate(deaths, confirmed) : `N/A`}\n        </td>\n        <td class=\"text--right text--small\">${returnDate(lastUpdate)}</td>\n    </tr>\n  `;\n","export const container = document.querySelector(\".root\");\nexport const totalCases = document.querySelector(\".total-cases\");\nexport const totalDeaths = document.querySelector(\".total-deaths\");\nexport const searchInput = document.getElementById(\"query\");\nexport const _Loader = document.querySelector(\".Loader\");\n","export let statistics = [];\n\nexport const setStatistics = data => {\n  statistics = [...data];\n};\n","import { statisticsui } from \"./ui\";\nimport { totalCases, totalDeaths, container } from \"./DOM\";\nimport { statistics } from \"./data\";\n\nexport const renderStatistics = stats => {\n  totalDeaths.innerText = [...statistics].reduce(\n    (total, stat) => total + stat.deaths,\n    0\n  );\n\n  totalCases.innerText = [...statistics].reduce(\n    (total, stat) => total + stat.confirmed,\n    0\n  );\n\n  if (stats.length < 1) {\n    container.innerHTML = `<tr><td colspan=\"5\"><p>Sorry, no results for that search. Please adjust your query.<p></td></tr>`;\n  } else {\n    container.innerHTML = statisticsui(stats);\n  }\n};\n","import { searchInput } from \"./DOM\";\nimport { statistics, setStatistics } from \"./data\";\nimport { renderStatistics } from \"./rendering\";\n\nfunction handleSearch(event) {\n  const results = statistics.filter(({ country }) => {\n    return country.toLowerCase().includes(event.target.value.toLowerCase());\n  });\n\n  renderStatistics(results);\n}\n\nsearchInput.addEventListener(\"keyup\", handleSearch, true);\n","import { request } from \"./modules/requests\";\nimport { renderStatistics } from \"./modules/rendering\";\nimport { setStatistics } from \"./modules/data\";\nimport \"./modules/events\";\nimport { _Loader } from \"./modules/DOM\";\n\n{\n  request\n    .then(response => response.json())\n    .then(({ features }) => {\n      const statistics = features\n        .map(\n          ({\n            attributes: {\n              Last_Update: lastUpdate,\n              Confirmed: confirmed,\n              Recovered: recovered,\n              Deaths: deaths,\n              Active: active,\n              Country_Region: country\n            }\n          }) => ({ lastUpdate, confirmed, recovered, deaths, active, country })\n        )\n        .filter(({ confirmed }) => confirmed)\n        .reduce((statistics, group) => {\n          const { country: currentCountry } = group;\n\n          const existingGroup = statistics.find(\n            ({ country }) => country === currentCountry\n          );\n\n          if (existingGroup) {\n            existingGroup.confirmed += group.confirmed;\n            existingGroup.deaths += group.deaths;\n            existingGroup.recovered += group.recovered;\n          }\n\n          return existingGroup ? [...statistics] : [...statistics, group];\n        }, []);\n\n      setStatistics(statistics);\n\n      return statistics;\n    })\n    .then(statistics => renderStatistics(statistics))\n    .catch(error => console.error(error.message))\n    .finally(() => {\n      _Loader.classList.remove(\"is--active\");\n    });\n}\n"]}