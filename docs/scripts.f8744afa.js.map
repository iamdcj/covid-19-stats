{"version":3,"sources":["modules/requests.js","modules/date-time.js","modules/DOM.js","modules/ui.js","modules/data.js","modules/rendering.js","modules/searching.js","modules/sorting.js","modules/events.js","scripts.js"],"names":["endpoint","request","fetch","returnDate","date","_Date","Date","isNaN","toLocaleDateString","main","document","querySelector","responsive","totalCases","totalDeaths","searchInput","getElementById","sortControls","querySelectorAll","statisticsUI","stats","innerHTML","map","index","country","statisticsMain","join","statistic","statisticsResponsive","handleRate","deaths","rate","lastUpdate","confirmed","statistics","renderedStatistics","setStatistics","data","setRenderedStatistics","renderStatistics","innerText","reduce","total","stat","length","container","handleSearch","event","results","filter","toLowerCase","includes","target","value","sortIcons","asc","desc","setSortAction","_El","order","sortIndicator","setAttribute","handleSorting","sortType","dataset","sort","sortOrder","forEach","control","sorted","a","b","addEventListener","returnMortalityRate","Math","round","then","response","json","features","Error","attributes","Last_Update","Confirmed","recovered","Recovered","Deaths","active","Active","Country_Region","group","currentCountry","existingGroup","find","catch","error","console","message"],"mappings":"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","file":"scripts.f8744afa.js","sourceRoot":"..","sourcesContent":["const endpoint =\n  \"https://services1.arcgis.com/0MSEUqKaxRlEPj5g/arcgis/rest/services/ncov_cases/FeatureServer/1/query?f=json&where=(Confirmed%20%3E%200)&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=Confirmed%20desc\";\n\nexport const request = fetch(endpoint);\n","export const returnDate = date => {\n  const _Date = new Date(date);\n\n  if (isNaN(_Date)) return;\n\n  return _Date.toLocaleDateString(\"en-us\");\n};\n","export const main = document.querySelector(\".root-main\");\nexport const responsive = document.querySelector(\".root-responsive\");\nexport const totalCases = document.querySelector(\".total-cases\");\nexport const totalDeaths = document.querySelector(\".total-deaths\");\nexport const searchInput = document.getElementById(\"query\");\nexport const sortControls = document.querySelectorAll(\".btn--sort\");\n","import { returnDate } from \"./date-time\";\nimport { main, responsive } from \"./DOM\";\n\nexport const statisticsUI = stats => {\n  main.innerHTML = stats\n    .map(({ country }, index) => statisticsMain(country, index))\n    .join(\"\");\n  responsive.innerHTML = stats\n    .map((statistic, index) => statisticsResponsive(statistic, index))\n    .join(\"\");\n};\n\nconst handleRate = (deaths, rate) => {\n  if (!deaths) {\n    return `N/A`;\n  }\n\n  return rate < 1 ? `< 1%` : `${rate}%`;\n};\n\nconst statisticsMain = (country, index) =>\n  ` <tr>\n      <td>${country}</td>\n    </tr>\n  `;\n\nconst statisticsResponsive = ({ lastUpdate, confirmed, deaths, rate }, index) =>\n  ` <tr>\n      <td  colspan=\"2\" class=\"color--orange text--center text--strong\">${confirmed}</td>\n      <td  colspan=\"2\" class=\"color--red text--center text--strong\">${deaths}</td>\n      <td class=\"text--center\">\n          ${handleRate(deaths, rate)}\n      </td>\n      <td class=\"text--right text--small\">${returnDate(lastUpdate)}</td>\n    </tr>\n  `;\n","export let statistics = [];\nexport let renderedStatistics = [];\n\nexport const setStatistics = data => {\n  statistics = [...data];\n};\n\nexport const setRenderedStatistics = data => {\n  renderedStatistics = [...data];\n};\n","import { statisticsUI } from \"./ui\";\nimport { totalCases, totalDeaths, main, responsive } from \"./DOM\";\nimport { statistics, setRenderedStatistics } from \"./data\";\n\nexport const renderStatistics = stats => {\n  totalDeaths.innerText = [...statistics].reduce(\n    (total, stat) => total + stat.deaths,\n    0\n  );\n\n  totalCases.innerText = [...statistics].reduce(\n    (total, stat) => total + stat.confirmed,\n    0\n  );\n\n  if (stats.length < 1) {\n    container.innerHTML = `<tr><td colspan=\"5\"><p>Sorry, no results for that search. Please adjust your query.<p></td></tr>`;\n  } else {\n    setRenderedStatistics(stats);\n    statisticsUI(stats);\n  }\n};\n","import { searchInput, sortControls } from \"./DOM\";\nimport { statistics } from \"./data\";\nimport { renderStatistics } from \"./rendering\";\n\nfunction handleSearch(event) {\n  const results = statistics.filter(({ country }) => {\n    return country.toLowerCase().includes(event.target.value.toLowerCase());\n  });\n\n  renderStatistics(results);\n}\n\nexport { handleSearch };\n","import { sortControls } from \"./DOM\";\nimport { renderedStatistics } from \"./data\";\nimport { renderStatistics } from \"./rendering\";\n\nconst sortIcons = {\n  asc: \"↑\",\n  desc: \"↓\"\n};\n\nconst setSortAction = (_El, order) => {\n  const sortIndicator = _El.querySelector(\"span\");\n  _El.setAttribute(\"data-sort-order\", order);\n  sortIndicator.innerText = sortIcons[order] || \"↕\";\n};\n\nfunction handleSorting() {\n  const _El = this;\n\n  if (!_El) {\n    return;\n  }\n\n  const sortIndicator = _El.querySelector(\"span\");\n  const sortType = _El.dataset.sort;\n  const sortOrder = _El.dataset.sortOrder;\n\n  sortControls.forEach(control => {\n    setSortAction(control, \"\");\n  });\n\n  const sorted = renderedStatistics.sort((a, b) => {\n    if (!sortOrder || sortOrder === \"asc\") {\n      setSortAction(_El, \"desc\");\n\n      if (sortType === \"country\") {\n        return b[sortType] < a[sortType] ? -1 : 1;\n      } else {\n        return b[sortType] - a[sortType];\n      }\n    } else {\n      setSortAction(_El, \"asc\");\n      if (sortType === \"country\") {\n        return a[sortType] > b[sortType] ? 1 : -1;\n      } else {\n        return a[sortType] - b[sortType];\n      }\n    }\n  });\n\n  renderStatistics(sorted);\n}\n\nexport { handleSorting };\n","import { searchInput, sortControls } from \"./DOM\";\nimport { handleSearch } from \"./searching\";\nimport { handleSorting } from \"./sorting\";\n\nsearchInput.addEventListener(\"keyup\", handleSearch, true);\n\nsortControls.forEach(control => {\n  control.addEventListener(\"click\", handleSorting, false);\n});\n","import { request } from \"./modules/requests\";\nimport { renderStatistics } from \"./modules/rendering\";\nimport { setStatistics } from \"./modules/data\";\nimport \"./modules/events\";\n\n{\n  const returnMortalityRate = (deaths, confirmed) =>\n    Math.round((deaths * 100) / confirmed);\n\n  request\n    .then(response => response.json())\n    .then(({ features }) => {\n      if (!features) {\n        throw Error(\"No data\");\n      }\n\n      const statistics = features\n        .map(\n          ({\n            attributes: {\n              Last_Update: lastUpdate,\n              Confirmed: confirmed,\n              Recovered: recovered,\n              Deaths: deaths,\n              Active: active,\n              Country_Region: country\n            }\n          }) => {\n            const rate = returnMortalityRate(deaths, confirmed);\n            return {\n              lastUpdate,\n              confirmed,\n              recovered,\n              deaths,\n              active,\n              country,\n              rate\n            };\n          }\n        )\n        .filter(({ confirmed }) => confirmed)\n\n        .reduce((statistics, group) => {\n          const { country: currentCountry } = group;\n\n          const existingGroup = statistics.find(\n            ({ country }) => country === currentCountry\n          );\n\n          if (existingGroup) {\n            existingGroup.confirmed += group.confirmed;\n            existingGroup.deaths += group.deaths;\n            existingGroup.recovered += group.recovered;\n          }\n\n          return existingGroup ? [...statistics] : [...statistics, group];\n        }, [])\n        .sort((a, b) => b.confirmed - a.confirmed);\n\n      setStatistics(statistics);\n\n      return statistics;\n    })\n    .then(statistics => renderStatistics(statistics))\n    .catch(error => console.error(error.message));\n}\n"]}